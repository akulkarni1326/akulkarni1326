#content/*ruleset 2 */
package com.otterproducts.edi.amazon.inbound.n850

def ruleSet amazon850v4010RS {

	var SystemContext sys = new SystemContext
	var BaseGlobalContext glb = new BaseGlobalContext
	var EdiEnvironmentContext env = new EdiEnvironmentContext
	var String v_date
	var DateTime v_Date
	var DateTime d_BEG05
	var Number v_sum
	var Number v_total
	var String v_RequestedDeliveryNotAfterDate
	var String v_RequestedDeliveryBeforeDate
	var String v_N104
	var String v_date1
	var String v_Sum
	var Number V_EpochTime
	var DateTime v_currentDateTime

	def execute(StorageNode sourceNode, StorageNode targetNode, TransformationSettings settings, StorageNode updateNode, StorageNode sourceContextNode, StorageNode targetContextNode) {
		var source = bindInput(typeof(com.otterproducts.core.edi.schemas.n850v4010EDI), sourceNode)
		var target = bindOutput(typeof(com.otterproducts.core.system.n850.PurchaseOrderMessageOBJ), targetNode)

		options [
			connectorOptions [
				sourceConnector = new X12Connector
				targetConnector = new XMLObjectConnector
			]
		]

		for source.Area1.BEG {
			new Move().execute("Otter") => #[target.purchaseOrderMessage.AdministrativeContact.Contact.current.FirstName]
			new Move().execute("EDI") => #[target.purchaseOrderMessage.AdministrativeContact.Contact.current.LastName]
			new Move().execute("otteredi@otterproducts.com") => #[target.purchaseOrderMessage.AdministrativeContact.Contact.current.EmailAddress]
			new Move().execute("970-419-7363") => #[target.purchaseOrderMessage.AdministrativeContact.Contact.current.Phones.Phone.PhoneNumber]
			new Move().execute("work") => #[target.purchaseOrderMessage.AdministrativeContact.Contact.current.Phones.Phone.PhoneTypeCode]
			initNew target.purchaseOrderMessage.Order {
				new Move().execute(source.Area1.BEG.BEG324) => #[target.purchaseOrderMessage.Order.PurchaseOrderNumber, this.env.User_Reference_1]
				new Move().execute(source.Area1.BEG.BEG373) => #[this.v_date]
				new Substring().execute(this.v_date, 1, 10) => #[this.v_date]
				# new Move().execute(this.v_date) => #[this.v_Date]
				new CreateDateTimeFromString().execute(this.v_date, "yyyyMMdd") => #[this.d_BEG05]
				new FormatDateTime().execute(this.d_BEG05, "yyyy-MM-dd") => #[this.v_date]
				new Move().execute(this.v_date) => #[target.purchaseOrderMessage.Order.OrderDate]
				new Move().execute("USD") => #[target.purchaseOrderMessage.Order.CurrencyCode]
				for source.Area1.DTM {
					if (new StringEquals().execute(source.Area1.DTM.current.DTM374, "063") => #[]) {
						{
							new Move().execute(source.Area1.DTM.current.DTM373) => #[this.v_date]
							new Substring().execute(this.v_date, 1, 10) => #[this.v_date]
							new CreateDateTimeFromString().execute(this.v_date, "yyyyMMdd") => #[this.v_Date]
							new FormatDateTime().execute(this.v_Date, "yyyy-MM-dd") => #[this.v_date]
							new Move().execute(this.v_date) => #[target.purchaseOrderMessage.Order.DeliveryRequestedDate, target.purchaseOrderMessage.Order.RequestedDeliveryNotAfterDate, this.v_RequestedDeliveryNotAfterDate]
						}
					}
					if (new StringEquals().execute(source.Area1.DTM.current.DTM374, "064") => #[]) {
						{
							new Move().execute(source.Area1.DTM.current.DTM373) => #[this.v_date1]
							new Substring().execute(this.v_date1, 1, 10) => #[this.v_date1]
							new CreateDateTimeFromString().execute(this.v_date1, "yyyyMMdd") => #[this.v_Date]
							new FormatDateTime().execute(this.v_Date, "yyyy-MM-dd") => #[this.v_date1]
							new Move().execute(this.v_date1) => #[target.purchaseOrderMessage.Order.RequestedDeliveryNotBeforeDate, this.v_RequestedDeliveryBeforeDate]
						}
					}
				}
				for source.Area1.REF {
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "OTTF5") => #[]) {
						{
							new Move().execute("10001100") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "OTTET") => #[]) {
						{
							new Move().execute(10000010) => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "LIFO3") => #[]) {
						{
							new Move().execute(10001936) => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "OTUEX") => #[]) {
						{
							new Move().execute(10004211) => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "OTUGI") => #[]) {
						{
							new Move().execute(10004258) => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
					if (new StringEquals().execute(source.Area1.REF.current.REF127, "OTUMB") => #[]) {
						{
							new Move().execute(10004299) => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.ID, target.purchaseOrderMessage.Order.BillToCustomerAccount.ID,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.ID, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerAccount.ID, this.env.User_Reference_3]
							new Move().execute("Amazon.com Accounts Payable") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.Name]
							new Move().execute("") => #[target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerLocations, target.purchaseOrderMessage.Order.BillToCustomerAccount.CustomerTypeName,
							target.purchaseOrderMessage.Order.BillToCustomerAccount.EmailAddress, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerContact, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Name,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine1, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.AddressLine2,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.PostalCode, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.StateCode,
							target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CityName]
							new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
						}
					}
				}
				if (new StringEquals().execute(source.Area1.sgN1.current.N1.N198, "ST") => #[]) {
					for source.Area1.sgN1 {
						new Move().execute(source.Area1.sgN1.current.N1.N167) => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipmentId, target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.PartyLocationIDCode,
						this.v_N104]
						new Move().execute("US") => #[target.purchaseOrderMessage.Order.Shipments.Shipment.ShipToCustomerLocation.Address.CountryCode]
					}
				}
				for source.Area2.sgPO1.current.PO1 initNew target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine {
					new Move().execute(source.Area2.sgPO1.current.PO1.PO1350) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.PurchaseOrderLineNumber]
					new Move().execute(source.Area2.sgPO1.current.PO1.PO1330) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.OrderedQuantity]
					new Move().execute("EACH") => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.ProductQuantityUnitOfMeasurement]
					new Move().execute(source.Area2.sgPO1.current.PO1.PO1212) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.ProductUnitPriceAmount]
					new Move().execute("SEATTLE") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.Address.CityName]
					new Move().execute("98108-0387") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.Address.PostalCode]
					new Move().execute("WA") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.Address.StateCode]
					new Move().execute("US") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.Address.CountryCode]
					if (new StringEquals().execute(source.Area2.sgPO1.current.PO1.PO1235, "VN") => #[]) {
						{
							new Move().execute(source.Area2.sgPO1.current.PO1.PO1234) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.Product.ProductId]
						}
					}
					new com.extol.ebi.reactor.lib.actions.numeric.Multiply().execute(source.Area2.sgPO1.current.PO1.PO1330, source.Area2.sgPO1.current.PO1.PO1212, 2) => #[this.v_sum]
					new com.extol.ebi.reactor.lib.actions.numeric.Add().execute(this.v_sum, this.v_total, 2) => #[this.v_total]
					new Move().execute("2324531766") => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.PartnerOrderLineReferenceSourceNode]
					new Move().execute(this.v_RequestedDeliveryBeforeDate) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.RequestedDeliveryNotBeforeDate]
					new Move().execute(this.v_RequestedDeliveryNotAfterDate) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.RequestedDeliveryNotAfterDate]
					new Move().execute(this.v_RequestedDeliveryNotAfterDate) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.DeliveryRequestedDate]
					new Move().execute(this.v_N104) => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.ShipmentId]
					new Move().execute(" ") => #[target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.Product.CustomerProductId,
					target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.Product.Description, target.purchaseOrderMessage.Order.CustomerOrderLines.CustomerOrderLine.current.Product.UPC]
				}
				new Move().execute("Buy") => #[target.purchaseOrderMessage.Order.OrderTypeName]
				new Move().execute("Unknown") => #[target.purchaseOrderMessage.Order.OrderStatusName]
				new Move().execute("2324531766") => #[target.purchaseOrderMessage.Order.PartnerOrderReferenceSourceNode]
				new Move().execute(this.v_total) => #[target.purchaseOrderMessage.Order.TotalAmount]
				new Move().execute("PO Box 80387") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.Address.AddressLine1]
				new RawMove().execute("0000") => #[target.purchaseOrderMessage.Order.BillToCustomerLocation.PartyLocationIDCode]
			}
			new GetCurrentDateTime().execute() => #[this.v_currentDateTime]
			new GetMilliseconds().execute(this.v_currentDateTime) => #[this.V_EpochTime]
			new Move().execute(this.V_EpochTime) => #[this.env.User_Reference_2]
		}
	}

}